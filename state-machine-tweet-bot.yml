AWSTemplateFormatVersion: "2010-09-09"
Description: "An example template with an IAM role for a Lambda state machine."
Resources:
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:*"
                  - "sns:*"
                  - "lambda:InvokeFunction"
                Resource: "*"
  GenerateMessage:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "GenerateMessage"
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt [ StatesExecutionRole, Arn ]
      Code:
        ZipFile: |
            import json

            def lambda_handler(event, context):
                user = event['body']['user']['screen_name']
                id_str = event['body']['id_str']
                url = "https://twitter.com/" + user + "/status/" + id_str
                message = "Here's an neet tweet: " + url
                return message
      Runtime: "python3.7"
      Timeout: "200"

  PollForTweet:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "PollForTweet"
      Handler: poller.handler
      Runtime: "python3.7"
      Timeout: "200"
      Role: !GetAtt [ StatesExecutionRole, Arn ]
      Code:
        S3Bucket: "code-along-mar1"
        S3Key: "Archive.zip"

  TweetBotStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: "TweetBot"
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "CodeAlong",
              "StartAt": "Find Tweet",
              "States": {
                "Find Tweet": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:us-west-2:071476240988:function:TweetPoller",
                  "ResultPath": "$.tweet",
                  "Next": "Wait 10s"
                },
                "Wait 10s": {
                    "Type": "Wait",
                    "Seconds": 10,
                    "Next": "Generate Message"
                },
                "Generate Message": {
                  "Type": "Task",
                  "Resource": "arn:aws:lambda:us-west-2:071476240988:function:createSMSMessage",
                  "InputPath": "$.tweet",
                  "ResultPath": "$.message",
                  "Next": "Message"
                },
                "Message": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "Message.$": "$.message",
                    "PhoneNumber.$": "$.phoneNumber"
                  },
                  "Next": "Final State"
                },
                "Final State": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          - {}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
